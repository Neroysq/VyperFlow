#!/usr/bin/env python3
import argparse
import json
import sys
import vyper

from vyper import compiler, optimizer
from vyper.parser.parser import parse_to_lll
from vyper.parser import parser_utils
from vyper import compile_lll

sherrloc = "Sherrloc/sherrloc"
sys.tracebacklimit = 0

parser = argparse.ArgumentParser(description='VyperFlow {0} programming language for Ethereum'.format(vyper.__version__))
parser.add_argument('input_file', help='VyperFlow sourcecode to compile')
parser.add_argument('-o', help='File to output', dest='output')
parser.add_argument('--noif', help='compile without information flow checking', action="store_true")
parser.add_argument('--cons', help='output constraint file', action="store_true")

args = parser.parse_args()


def print_asm(asm_list):
    skip_newlines = 0
    for node in asm_list:
        if isinstance(node, list):
            print_asm(node)
            continue

        is_push = isinstance(node, str) and node.startswith('PUSH')

        print(str(node) + ' ', end='')
        if skip_newlines:
            skip_newlines -= 1
        elif is_push:
            skip_newlines = int(node[4:]) - 1
        else:
            print('')


import subprocess
if __name__ == '__main__':

    with open(args.input_file) as fh:
        code = fh.read()
        output = '0x' + compiler.compile(code).hex()
        if not args.noif :
            cons = compiler.if_compile(code)
            if args.cons :
                output = cons
            else :
                with open("temporary.con", "w") as cons_file :
                    cons_file.write(cons)
                if_log = subprocess.check_output([sherrloc, "temporary.con", "-c"]).decode()
                if "No errors" not in if_log :
                    output = if_log
                import os
                os.remove("temporary.con")
        if args.output is not None :
            with open(args.output, "w") as output_file :
                output_file.write(output)
        else :
            print(output)


