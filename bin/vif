#!/usr/bin/env python3
import argparse
import json
import sys
import vyper

from vyper import compiler, optimizer
from vyper.parser.parser import parse_to_lll
from vyper.parser import parser_utils
from vyper import compile_lll

sherrloc = "Sherrloc/sherrloc"
sys.tracebacklimit = 0

parser = argparse.ArgumentParser(description='VyperFlow {0} programming language for Ethereum'.format(vyper.__version__))
parser.add_argument('input_file', help='VyperFlow sourcecode to compile')
parser.add_argument('-o', help='File to output', dest='output')
parser.add_argument('--noif', help='compile without information flow checking', action="store_true")
parser.add_argument('--cons', help='output constraints file', action="store_true")

args = parser.parse_args()


def print_asm(asm_list):
    skip_newlines = 0
    for node in asm_list:
        if isinstance(node, list):
            print_asm(node)
            continue

        is_push = isinstance(node, str) and node.startswith('PUSH')

        print(str(node) + ' ', end='')
        if skip_newlines:
            skip_newlines -= 1
        elif is_push:
            skip_newlines = int(node[4:]) - 1
        else:
            print('')

class cmdfmt:
    SUCC = '\033[42m' + '\033[97m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[103m'
    FAIL = '\033[41m' + '\033[97m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    BRIGHT = '\033[97m'
    YELLOW = '\033[33m'


    def test() :
        print(''.join(['\033[' + str(x) + 'm' +str(x)+'\033[0m' for x in range(0,150)])) 

def fmt(s, conf) :
    return ''.join(conf) + s + cmdfmt.ENDC

def pos_printer(line, code_lines) :
    tmp = line.split('[')[1].split(']')[0]
    lineno = tmp.split(',')[0]
    colno = tmp.split(',')[1].split('-')[0]
    code_line = code_lines[int(lineno) - 1]
    pointer = ' ' * (int(colno) - 1) + fmt('^', [cmdfmt.YELLOW])
    return 'Line no.' + fmt(lineno, [cmdfmt.YELLOW, cmdfmt.BOLD]) + ', ' + 'Column no.' + fmt(colno, [cmdfmt.YELLOW, cmdfmt.BOLD]) +':\n' + code_line + '\n' + pointer

def if_log_pretty_printer(log, code_lines) :
    #if '⊓' in log or '⊔' in log :
    #return log
    lines = log.strip().split('\n')
    nxt = {}
    for line in lines :
        if '-' in line :
            left, right = line[2:].split(',')[0].split('<=')
            if 'P_' in left or left == '⊥' or left == '⊤' :
                end = right
            elif 'P_' in right or '⊥' == right or '⊤' == right:
                start = left
            else :
                nxt[right] = {"name" : left, "pos" : pos_printer(line, code_lines)}
    output = 'Possible information flow violation(s):'
    while True :
        if start not in nxt :
            break
        output += '\n' + nxt[start]["pos"]
        if start == end :
            break
        start = nxt[start]["name"]
    return output


import subprocess
if __name__ == '__main__':
    #cmdfmt.test()
    with open(args.input_file) as fh:
        code = fh.read()
        code_lines = code.splitlines()
        output = '0x' + compiler.compile(code).hex()
        if_passed = True
        if not args.noif :
            cons = compiler.if_compile(code)
            if args.cons :
                output = cons
            else :
                with open("temporary.con", "w") as cons_file :
                    cons_file.write(cons)
                if_log = subprocess.check_output([sherrloc, "temporary.con", "-c"]).decode()
                if "No errors" not in if_log :
                    if_passed = False
                    output = if_log_pretty_printer(if_log, code_lines)
                else :
                    print(cmdfmt.SUCC + "information flow checking passed." + cmdfmt.ENDC)
                import os
                os.remove("temporary.con")
        if args.output is not None :
            with open(args.output, "w") as output_file :
                output_file.write(output)
        else :
            if if_passed :
                print(cmdfmt.OKBLUE + "bytecode:" + cmdfmt.ENDC)
            else :
                print(cmdfmt.FAIL + "information flow checking failed." + cmdfmt.ENDC)
            print(output)


