# Open Auction

# Auction params
# Beneficiary receives money from the highest bidder
beneficiary: IFL(address, beneficiary)

# Initial Price
initial_price: IFL(wei_value, this)

# Current state of auction
highest_bidder: IFL(address, this)
highest_bid: IFL(wei_value, this)

# Create a simple auction on behalf of the
# beneficiary address `_beneficiary`.
@public
@IFL_this
def __init__(_beneficiary: IFL(address, beneficiary), _initial_price: IFL(wei_value, beneficiary)):
    self.beneficiary = _beneficiary
    self.initial_price = endorse(_initial_price, beneficiary, this)

# Bid on the auction with the value sent
# together with this transaction.
# The value will only be refunded if the
# auction is not won.
@public
@payable
@IFL_this
def bid():
    # Check if bid is high enough
    assert msg.value > self.initial_price
    assert msg.value > self.highest_bid
    if not self.highest_bid == 0:
        # Sends money back to the previous highest bidder
        send(self.highest_bidder, self.highest_bid)
    self.highest_bidder = msg.sender
    self.highest_bid = msg.value


# End the auction and send the highest bid
# (or nothing) to the beneficiary.
@public
@IFL_beneficiary
def end_auction():
    # It is a good guideline to structure functions that interact
    # with other contracts (i.e. they call functions or send Ether)
    # into three phases:
    # 1. checking conditions
    # 2. performing actions (potentially changing conditions)
    # 3. interacting with other contracts
    # If these phases are mixed up, the other contract could call
    # back into the current contract and modify the state or cause
    # effects (Ether payout) to be performed multiple times.
    # If functions called internally include interaction with external
    # contracts, they also have to be considered interaction with
    # external contracts.

    # Check if the caller is the beneficiary
    # assert msg.sender == self.beneficiary

    # Send all the money back to the beneficiary and destroy the contract
    selfdestruct(endorse(self.beneficiary, beneficiary, this))
